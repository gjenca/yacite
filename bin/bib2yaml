#!/usr/bin/python
# -*- coding: utf-8 -*-
import yaml
import sys
from pybtex.database.input import bibtex
from yacite.utils.sane_yaml import yaml_dump_encoded
from yacite.utils.titlecase import titlecase 
import re
import tempfile
import unicodedata
from io import StringIO

def readpubs(f):

    parser = bibtex.Parser(encoding='utf-8')
    memfile=f.read()
    uni=memfile.decode("utf-8")
    bib_data = parser.parse_stream(StringIO(uni))
    ret=[]
    for entry in bib_data.entries.itervalues():
        try:
            pub={}
            pub["type"]=entry.type
            pub["authors"]=map(unicode,entry.persons['author'])
            for fname,value in entry.fields.iteritems():
                pub[fname]=value.strip('{}')
                if fname in ("journal","title","series","booktitle") and pub[fname].isupper():
                    pub[fname]=titlecase(pub[fname].lower())
            if "pages" in pub:
                pub["startpage"],pub["endpage"]=[x for x in pub["pages"].split("-",1)]
                pub["startpage"]=pub["startpage"]
                pub["endpage"]=pub["endpage"]
                del pub["pages"]
            for fname in pub:
                try:
                    if type(pub[fname]) in (str,unicode):
                        pub[fname]=int(pub[fname])
                except ValueError:
                    pass
            if "abstract" in pub:
                del pub["abstract"]
            ret.append(pub)
        except:
            print "error in",entry
            raise
    return ret

f=tempfile.TemporaryFile()
for line in sys.stdin:
    if re.match("^ *author *=.*$",line):
        key,val=line.split("=",1)
        val=re.sub(r", *(\w\w)",r" and \1",val)
        f.write("%s=%s" % (key,val))
    else:
        f.write(line)
f.seek(0)
pubs=readpubs(f)
for pub in pubs:
    print "---"
    sys.stdout.write(yaml_dump_encoded(pub))



