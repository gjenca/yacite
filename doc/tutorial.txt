<h1><tt>yacite</tt> tutorial</h1>

Motto
-----

>This is the Unix philosophy: Write programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams, because that is a universal interface.

>Bell Laboratories. M. D. McIlroy, E. N. Pinson, and B. A. Tague.
>“Unix Time-Sharing System Forward”. *The Bell System Technical
>Journal* 1978. **57** (6, part 2). p. 1902.

What is <tt>yacite</tt>
-----------------------

What is <tt>yacite</tt> not
---------------------------

Example 1: Creating HTML list of your publications
--------------------------------------------------

1.	Open a terminal emulator and type the following commands on the shell
prompt

		mkdir yacite_sandbox
		cd yacite_sandbox

	This creates a new directory.

1.	You will need a BibTeX ('*.bib') database file containing your publications.
	You can download it from a bibliographic database like Scopus of Web of
	Science. Save the file (let us call it `mypubs.bib`) in the
	`yacite_sandbox` directory you created.
1.	Go back to the shell prompt (the current directory should be `yacite
	sandbox` and type the following command 

		bib2yaml mypubs.bib
	
	This command prints on its standard output a series of records in YAML
	format, we call this *a YAML stream*. A YAML stream consists of a sequence
	of records that look like this:

		authors: ['Jenča, Gejza']
		doi: 10.1007/s00500-012-0901-x
		endpage: 47
		grants: VEGA G-2/0059/12, VEGA G-1/0297/11, APVV-0073-10, APVV-0178-11
		issn: 1432-7643
		issue: 1
		journal: Soft Computing
		keywords: Effect algebra; Lattice effect algebra; Compatibility center
		publisher: Springer-Verlag
		startpage: 45
		tags: [zpub, sci, cc, scopus]
		title: Congruences generated by ideals of the compatibility center of lattice efect algebras
		type: article
		url: http://dx.doi.org/10.1007/s00500-012-0901-x
		volume: 17
		year: 2013

   	The records in the YAML stream are separated by triple minus `---`. 
	
	Unlike BibTeX, YAML is a popular way to represent data in the current world of
   	computing. Probably in every programming language, there is a library to
   	read and write YAML data. Unlike other serialization formats (like
	XML), the YAML format was designed to be both human-readable and
	human-editable. It can be edited using any text editor.

1. 	What we want to do now is to convert a YAML stream into a HTML document.
   	This is accomplished using a *template*. A HTML template is a HTML file
   	containing special non-HTML control sequences 
	representing variables, loops, conditions
   	etc. `yacite` uses the jinja2 template language.

   	The templates are kept in a separate directory. Create the
   	directory on the command prompt:

		mkdir templates

   	To keep things simple, we shall create a very simple template. Open your
   	favorite text editor and type in the following jinja2 code.

		<html>
		<body>
		<h1>List of publications</h1>
		<ol>
		# for rec in records:
		<li>
		{{  rec.authors|join(", ") }}
		<em>{{rec.title}}</em>,
		{{rec.journal}},
		<strong>{{rec.volume}}</strong>
		({{rec.year}})
		{{rec.startpage}}-{{rec.endpage}}
		</li>
		# endfor
		</ol>
		</body>
		</html>

   	This is pretty much self explanatory. The jinja2 commands start with `#`.
   	The variables are enclosed in double curly brackets. The construction

		{{  rec.authors|join(", ") }}
	
	means that the authors should be separated by a comma and a space.

1. 	Save the template under some name, let us say `publist.html` in the
   	`templates` directory.

1. 	Type in the following command on the shell prompt.
   
		bib2yaml mypubs.bib | yacite render publist.html
	
	This is called a *pipe sequence*. The whole `yacite` system is based on
   	pipe sequences. There are two commands at work here. The `bib2yaml` command
   	produces a YAML stream as its output. The `|` sign (called *pipe*) in the middle connects
   	the output of the `bib2yaml` command and with the input of the other
   	command, `yacite render`.  The `yacite render` command reads a YAML stream
   	on its input, fills in the template, and then produces HTML on its output. 
	
	There are more things that `yacite render` does (like dealing with
	citations) but, for the moment, we do not care.

1. 	Save the resulting HTML into a file using the redirect sign `>` :

		bib2yaml mypubs.bib | yacite render publist.html > mypubs.html
   	
	and open the `mypubs.html` in you favourite browser. Enjoy the result. 
	
1.	Try to alter the
	template; for example, change the `<ol>` and `</ol>` tags to `<ul>`
	and `</ul>`, respectively, and observe the results in `mypubs.html`. 
	Note that you need to click the reload button in your browser to see the 
	updates in a HTML document.

1.	If you need to create a MS Word document, there are some ways how to convert a
	simple HTML document to a `.doc` file. For example, you can try the
	excellent `pandoc` document conversion utility. In addition, as I was
	told, MS Word should be capable to load a HTML file and save it as a
	MS Word file.

Example 2: Filtering the YAML stream
------------------------------------

1.	Try the following command
	
		bib2yaml mypubs.bib | yacite filter 'year == 2012'

	Note that the argument of the `yacite filter` command in enclosed in
	apostrophes. This tell the shell to pass it to the `yacite` as a
	single argument.  The argument `year == 2012` is a Python expression.
	
	The result should be a filtered YAML stream that contains only the
	2012 publications. 
	
	**Explanation:** The `yacite filter` command evaluates the `year == 2012`
	expression in the environment given by the record in stream. If the
	expression is true, the records is outputted, otherwise it is skipped.
	
	You can now try create a HTML document using `yacite render`, as in
	the previous example.

		bib2yaml mypubs.bib | yacite filter 'year == 2012' | yacite render publist.html > mypubs_2012.html

1.	Alter the argument of `yacite filter` as follows:

		bib2yaml mypubs.bib | yacite filter '"the" in title' | yacite render publist.html > mypubs_the.html

	This should create a list of publications containg 'the' as a
	substring of the title.

1.	You can use conjunction (`and`), disjunction (`or`), negation ('not'):

		... yacite filter '("Fourier" in title) or "(Laplace" in title)' ...
		... yacite filter '(year > 2000) and (year <= 2010)' ...
		... yacite filter 'not ("Effect" in keywords)' ...

	Let me remark that the last command is equivalent to much more
	readable
		
		... yacite filter '"Effect" not in keywords' ...

	We refer to Python tutorial for more information about Python
	expressions.

Saving the data into database directory
---------------------------------------

Changing the data in the datadir
--------------------------------

Adding citations
----------------

Rendering citation lists
------------------------

Rewriting 
---------


