#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import yaml
import sys
from pybtex.database.input import bibtex
import yacite.utils.sane_yaml as sane_yaml
from yacite.utils.titlecase import titlecase 
import re
import tempfile
import unicodedata
import argparse
from io import StringIO
from yacite.utils.misc import strip_accents


def readpubs(f):

    parser = bibtex.Parser(encoding='utf-8')
    memfile=f.read()
    uni=memfile.decode("utf-8","ignore")
    bib_data = parser.parse_stream(StringIO(uni))
    ret=[]
    for entry in bib_data.entries.itervalues():
        try:
            pub={}
            pub["type"]=entry.type.lower()
            if entry.persons:
                pub["authors"]=map(unicode,entry.persons['author'])
            else:
                pub["authors"]=[u"NOBODY, X."]
            for fname,value in entry.fields.iteritems():
                # TODO: sanitize fname properly
                fname=fname.replace("-","_") # - is forbidden in yaml map keys
                fname=fname.lower()
                pub[fname]=value.strip('{}')
                if not ns.no_titlecase and \
                        fname in ("journal","title","series","booktitle") and \
                        pub[fname].isupper():
                    pub[fname]=titlecase(pub[fname].lower())
            if "year" not in pub:
                pub["year"]="NOYEAR"
            if "title" not in pub:
                pub["title"]="NOTITLE"
            if "pages" in pub:
                if "-" in  pub["pages"]:
                    pub["startpage"],pub["endpage"]=[x for x in re.split('-+',pub["pages"],maxsplit=1)]
                else:
                    pub["startpage"]=pub["pages"]
                    pub["endpage"]=pub["pages"]
                del pub["pages"]
            for fname in pub:
                try:
                    if type(pub[fname]) in (str,unicode):
                        pub[fname]=int(pub[fname])
                except ValueError:
                    pass
            if "abstract" in pub and not ns.keep_abstract:
                del pub["abstract"]
            if "art_number" in pub:
                pub["article_number"]=pub["art_number"]
                del pub["art_number"]
            ret.append(pub)
        except:
            print "error in",entry
            raise
    return ret

def patch_and_convert(fin):

    keys_d={}
    start_suffix=ord('a')
    if ns.scopus:
        f=tempfile.TemporaryFile()
        for line in fin:
            # Scopus generates invalid key for auhors
            # with multiword surnames
            # As of 2017, Scopus generates keys with accents (WRONG)
            m=re.match(r"^( *@.*{ *)([^ ,]*)(.*)$",line)
            if m:
                line="".join(line.split())
                line=strip_accents(line.decode('utf-8')).encode('utf-8')
                key=m.group(2)
                keys_d[key]=keys_d.get(key,0)+1
                if keys_d[key]==1:
                    key_suffix=''
                else:
                    key_suffix=chr(start_suffix-1+keys_d[key])
                line=m.group(1)+m.group(2)+key_suffix+m.group(3)
            # For years, Scopus produces an invalid list of authors
            if re.match("^ *author *=.*$",line):
                key,val=line.split("=",1)
                val=re.sub(r", *(\w\w)",r" and \1",val)
                f.write("%s=%s" % (key,val))
            else:
                f.write(line)
        f.seek(0)
    else:
        f=fin
    pubs=readpubs(f)
    for pub in pubs:
        print "---"
        sys.stdout.write(sane_yaml.dump(pub))

parser=argparse.ArgumentParser()
parser.add_argument("bibfile",nargs="*",help="BibTeX file to read; reads standard input if omitted")
parser.add_argument("-s","--scopus",action="store_true",help="correct broken BibTeX produced by SCOPUS")
parser.add_argument("-a","--keep-abstract",action="store_true",help="keep abstract")
parser.add_argument("-n","--no-titlecase",action="store_true",help="do not titlecase ALL CAPS strings")
ns=parser.parse_args()

if not ns.bibfile:
    patch_and_convert(sys.stdin)
else:
    for fnm in ns.bibfile:
        patch_and_convert(file(fnm))

