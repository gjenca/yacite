#!/usr/bin/env python2

import sys
import argparse

import yacite.command.read
import yacite.command.merge
import yacite.command.filter
import yacite.command.execc
import yacite.command.render
import yacite.command.append
import yacite.command.unappend
import yacite.command.rewrite
import yacite.command.sort
import yacite.command.delfields
import yacite.command.checkdups

import yacite.utils.sane_yaml as sane_yaml

c_map={
    "read":yacite.command.read.Read,
    "merge":yacite.command.merge.Merge,
    "filter":yacite.command.filter.Filter,
    "exec":yacite.command.execc.Exec,
    "render":yacite.command.render.Render,
    "append":yacite.command.append.Append,
    "unappend":yacite.command.unappend.Unappend,
    "rewrite":yacite.command.rewrite.Rewrite,
    "sort":yacite.command.sort.Sort,
    "delfields":yacite.command.delfields.DelFields,
    "checkdups":yacite.command.checkdups.CheckDups,
}

parse=argparse.ArgumentParser()
subparsers=parse.add_subparsers(dest="command",help="The yacite subcommand you want to run")
for cmd in c_map:
    cmd_class=c_map[cmd]
    subpar=subparsers.add_parser(cmd,help=cmd_class.__doc__)
    cmd_class.add_arguments(subpar)
subcommands_args=[]
sc_args=[]
for arg in sys.argv[1:]:
    if arg=='!':
        subcommands_args.append(sc_args)
        sc_args=[]
    else:
        sc_args.append(arg)
subcommands_args.append(sc_args)
subcommands=[]
for sc_args in subcommands_args:
    ns=parse.parse_args(sc_args)
    command=c_map[ns.command](ns)
    subcommands.append(command)

for i,command in enumerate(subcommands):
    if i==0:
        if command.does_input:
            iterator=command.execute()
            continue
        else:
            iterator=sane_yaml.load_all(sys.stdin)
    iterator=command.execute(iterator)

if not subcommands[-1].does_output:
    for rec in iterator:
        print '---'
        sys.stdout.write(sane_yaml.dump(rec))
        





