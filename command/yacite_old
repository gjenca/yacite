#!/usr/bin/env python
# -*- coding: utf-8 -*-
import yaml
import sys
import getopt
import os
import glob
import tempfile
from jinja2 import Template,FileSystemLoader,Environment
import itertools

class Bibdoc(object):

    paths=[]

    def __init__(self,path):
        f=file(path)
        if path not in self.paths:
            self.paths.append(path)
        self.list=yaml.load(f)
        self.path=path
        file_i=self.paths.index(path)
        for i,bi in enumerate(self.list):
            bi["__file__"]=file_i
            bi["__index__"]=i

    def __iter__(self):
        return iter(self.list)

    def __repr__(self):
        return path


def rewrite_string(string,repl_dict):
    for what,by_what in repl_dict.iteritems():
        string=string.replace(what,by_what)
    return string

def rewrite(items,repl_dict):
    
    for bi in items:
        for key in bi:
            if type(bi[key]) in (str,unicode):
                bi[key]=rewrite_string(bi[key],repl_dict)
        if "authors" in bi:
            bi["authors"]=[rewrite_string(aut,repl_dict) for aut in bi["authors"]] 

try:
    f=file("replace.yaml")
    repl_dict=dict(yaml.load(f))
except IOError:
    repl_dict={}

opts,args=getopt.getopt(sys.argv[1:],"t:f:c:")
templ=None
filt="True"
cfilt="True"
for o,a in opts:
    if o=='-t' and a:
        templ=a
    if o=='-f' and a:
        filt=a
    if o=='-c' and a:
        cfilt=a
    
if not templ:
    sys.stderr.write("Usage : %s -t template [-f filter_expression] \
    [-c cite_filter_expression] yaml_file | dir\n" % sys.argv[0])
    sys.exit(1)
print >> sys.stderr, "About to load..." 
bibdocs=[]
if args:
    if os.path.isdir(args[0]):
        for root,dirs,files in os.walk(args[0]):
            for name in files:
                if name.endswith(".yaml"):
                    path=os.path.join(root,name)
                    print >> sys.stderr,"...%s" % path 
                    bibdocs.append(Bibdoc(path))

    else:
        bibdocs.append(Bibdoc(args[0]))
else:
    print >> sys.stderr, "Expecting file or dir as an argument"
    sys.exit(1)
bibitems=list(itertools.chain(*bibdocs))
print >> sys.stderr, "Loaded..." 
keybi={}
for bi in bibitems:
    if "key" in bi:
        keybi[bi["key"]]=bi
print >> sys.stderr, "Keys reversed..."
for bi in bibitems:
    if "myown" not in bi:
        bi["myown"]=False
    if not "citedby" in bi:
        bi["citedby"]=[]
    if not "cites" in bi:
        bi["cites"]=[]
    bi["cites"]=[keybi[key] for key in bi["cites"]]
for bi in bibitems:
    if "arxiv" in bi:
        bi["arxivurl"]="http://arxiv.org/abs/%s" % bi["arxiv"]
print >> sys.stderr, "Defaulted..." 
bibitems=[bi for bi in bibitems 
    if not bi["myown"] or eval(filt,dict(bi)) ]
print >> sys.stderr, "Filtered..." 
rewrite(bibitems,repl_dict)
print >> sys.stderr, "Rewritten..." 
for i,bi in enumerate(bibitems):
    if bi["myown"]:
        continue
    if eval(cfilt,dict(bi)):
        for j,cited in enumerate(bi["cites"]):
            cited["citedby"].append(bi)
print >> sys.stderr, "Cites reversed..."
env=Environment(loader=FileSystemLoader('templates'),
    line_statement_prefix="#")
t=env.get_template(templ)
sys.stdout.write(t.render(bibitems=bibitems).encode('utf-8'))
print >> sys.stderr, "Finished."

